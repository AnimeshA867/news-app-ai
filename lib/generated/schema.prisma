// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  role          Role      @default(AUTHOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[]
  sessions      Session[]
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expires   DateTime
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Article {
  id               String    @id @default(cuid())
  title            String
  slug             String    @unique
  excerpt          String?
  content          String
  status           Status    @default(DRAFT)
  featuredImage    String?
  readTime         Int?
  viewCount        Int       @default(0)
  publishedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  authorId         String
  categoryId       String
  author           User      @relation(fields: [authorId], references: [id])
  category         Category  @relation(fields: [categoryId], references: [id])
  tags             Tag[]
  featuredImageAlt String?
  // SEO fields
  metaTitle        String?
  metaDescription  String?
  metaKeywords     String?
  canonicalUrl     String?
  noIndex          Boolean   @default(false)
  structuredData   String?   @db.Text
  jsonLd           Json?
}

model Media {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id                    String  @id @default(cuid())
  siteName              String
  tagline               String?
  description           String?
  logoUrl               String?
  faviconUrl            String?
  siteUrl               String?
  // Add social media image fields
  socialImageUrl        String? // Default social image for the site
  twitterImageUrl       String? // Twitter-specific image (fallback to socialImageUrl)
  facebookImageUrl      String? // Facebook-specific image (fallback to socialImageUrl)
  // Existing fields
  senderEmail           String?
  senderName            String?
  smtpHost              String?
  smtpPort              String?
  smtpUsername          String?
  smtpPassword          String?
  enableNewsletter      Boolean @default(true)
  enableSearch          Boolean @default(true)
  enableSocialSharing   Boolean @default(true)
  enableRelatedArticles Boolean @default(true)
}

model Advertisement {
  id          String    @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  linkUrl     String?
  width       Int       @default(300)
  height      Int       @default(250)
  position    String // sidebar, header, footer, in-article, etc.
  startDate   DateTime  @default(now())
  endDate     DateTime?
  isActive    Boolean   @default(true)
  impressions Int       @default(0)
  clicks      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  adCode      String?   @db.Text // For custom ad code/scripts
  priority    Int       @default(1) // Higher priority ads show first

  // For targeting specific pages
  pages AdPagePlacement[]
}

model AdPagePlacement {
  id              String        @id @default(cuid())
  pageType        String // article, category, homepage, etc.
  pageIdentifier  String? // slug or id of specific page
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)

  @@unique([pageType, pageIdentifier, advertisementId])
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

enum Status {
  DRAFT
  PUBLISHED
  SCHEDULED
}
